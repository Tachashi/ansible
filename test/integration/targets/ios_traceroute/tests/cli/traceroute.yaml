---
- debug: msg="START cli/traceroute.yaml on connection={{ ansible_connection }}"

- ios_command:
    commands: show version
    provider: "{{ cli }}"
  register: show_version_result

- set_fact: management_interface=GigabitEthernet0/0
  when: "'Cisco IOS' in show_version_result.stdout[0]"

- set_fact: management_interface=GigabitEthernet1
  when: "'Cisco IOS-XE' in show_version_result.stdout[0]"

- name: Get show ip management interface output
  ios_command:
    commands:
      - "show ip interface {{ management_interface }} | include Internet address"
    provider: "{{ cli }}"
  register: show_ip_interface_result

- name: Extract the IP address from registered output
  set_fact: management_ip="{{ show_ip_interface_result.stdout[0].split()[-1].split('/')[0] }}"

- name: expected successful ping1
  ios_traceroute:
    dest: '{{ management_ip }}'
    provider: "{{ cli }}"
  register: esp1

- name: expected successful ping2
  ios_traceroute:
    dest: '{{ management_ip }}'
    probe: 4
    source: '{{ management_ip }}'
    ttl_min: 1
    ttl_max: 20
    provider: "{{ cli }}"
  register: esp2

- name: check if the traceroute result includes specific transit ip address in hop 1
  assert: 
    that:
        - esp1.hop['1'] == ['{{ management_ip }}']
        - esp2.hop['1'] == ['{{ management_ip }}']

- name: unexpected unsuccessful ping1
  ios_traceroute:
    dest: '10.255.255.250'
    provider: "{{ cli }}"
  register: uup1
  ignore_errors: yes

- name: unexpected unsuccessful ping2
  ios_traceroute:
    dest: '10.255.255.250'
    probe: 4
    source: '10.255.255.250'
    ttl_min: 1
    ttl_max: 20
    provider: "{{ cli }}"
  register: uup2
  ignore_errors: yes

- name: assert
  assert:
    that:
    - uup1.failed == uup2.failed == true


